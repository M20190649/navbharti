How to create your own handwriting font:
1. [2] If you write a letter with e.g. MS Word you have to use one of the fonts installed on your computer. This results in an impersonal look of the document. MyScriptFont.com enables you to use your own handwriting like every other font installed on your computer.
With MyScriptFont.com you can give your digital produced documents a personal touch again. http://www.myscriptfont.com/.

2. We have put together our hand-picked selection of free handwriting fonts. All these fonts are available to use with our handwritten letter application. You can download some of the handwritten font and install to the window or paste the font file to the system font folder and can use the font as normal font thats it.

3. [1] Some of the free tools to create your own font and feed to the system font folder or install that:
	1. FontStruct
	FontStruct is a free online font editor, which means you can create your own fonts directly in a web browser, without having to install special software on your computer.

	Once you're happy with your work, you can save and download it as a TrueType font file (.ttf), install it in your computer and use it in any Windows and/or Mac application (e.g. Microsoft Office products, Photoshop and so on). You can even use it as a custom web font for your site.
	
	2. FontForge
	FontForge is a free font editor for the desktop that can be installed in Windows, Mac OS and Linux. You can create your own font from scratch or modify an existing font file. It can handle many font file types, including TrueType (.ttf), PostScript (.ps), OpenType (.otf) and more.

	The user interface of this font editor might seem daunting to beginners at first, so to get you on your way, read over the "steps to creating a font" tutorial on the FontForge website.
	
	3. BitfontMaker
	This online font-building tool allows you to create fonts that have simple, geometric shapes. It's a bitmap font editor, which means that you draw your font's characters (referred to as glyphs) pixel by pixel.

	It's dead simple to use and, once you're done with your font design, you can download and save your font as a TrueType file.
	
	4. Type light
	Available only for Windows, Type light is a freeware font editor that you can use to edit existing font files or to design your own font from scratch. This tool can deal with TrueType, OpenType and PostScript font formats, with the ability to convert font files from one to another. The software is free for personal use and for limited commercial use.
	
	5. gbdfed Bitmap Font Editor
	gdbfed is a free font-creation software that you can use to edit or create your own fonts. It has native support for BDF fonts and other lesser-known font file types, but -- with a little trickery -- it can export to the more popular OpenType font format, too.

	Beware, though, that the installation process of gbdfed can be cumbersome -- it was created for Linux, requires GTK+ to be installed and, for most computer users, will require the use of the command-line to compile the software. It's been tested on Mac OS and, in its current state, doesn't run well on Windows.

	6. Font Constructor
	This free, Mac-only font editor was produced with the intention of giving students a tool for learning about font construction through hands-on experimentation and training. However, as the creator of the tool says, "Font Constructor is not only meant for students" -- it can be used by graphic and type designers, as well as anyone who wishes to create fonts.

	7. Raster Font Editor
	Raster Font Editor is a standalone application, which means you can run it directly via your portable storage device (such as a USB flash drive) or cloud storage app, like Dropbox, without having to install it. It's not as robust in features like some of the other tools already mentioned, but it can be a great option for those only needing basic font editing features and software portability.
	
	
http://sourceforge.net/projects/crimestat/
CrimeStat is an web-application which analyses the police's press releases of Berlin and visualizes the different criminal offences on a map of Berlin. It also shows different statistics about the crimes.
http://crimestat.sourceforge.net/

Creating Random Points in qgis:
To generate N number of points in a definded area, we can use Random Point tool that is available in qgis.
1. Load Polygon layer: That we can do from "Layer -> Add Vector Layer -> Browse -> shape/file/path/ -> Ok".
2. Vector->Research Tools->Random Points 
3. Select the Layer name from "Input Boundary Layer" and input the Total number of points that you want to be generated in "use this number of points"
4. Specify the point shape file name in "Output Shapefile".
5. Click ok it may take several time depending on number of point that has to be generated.

Random Points generated for Districts of Kerala State:
1. Arrested Persons (24/08/2014 to 30/08/2014) http://www.keralapolice.gov.in/newsite/active_arrested.html
Trivandrum City (http://www.keralapolice.gov.in/newsite/pdfs/arrested_persons_2014/august/4/arrested_persons_tvmcity.pdf)
Trivandrum Rural (http://www.keralapolice.gov.in/newsite/pdfs/arrested_persons_2014/august/4/arrested_persons_tvmrl.pdf) for both the files we have generated one shape file becouse dont have urban and rural polygon of this district.
Kollam City (http://www.keralapolice.gov.in/newsite/pdfs/arrested_persons_2014/august/4/arrested_persons_klmcity.pdf)
Kollam Rural (http://www.keralapolice.gov.in/newsite/pdfs/arrested_persons_2014/august/4/arrested_persons_klmrl.pdf) for both the files we have generated one shape file becouse dont have urban and rural polygon of this district.
Pathanamthitta (http://www.keralapolice.gov.in/newsite/pdfs/arrested_persons_2014/august/4/arrested_persons_pta.pdf)
Kottayam (http://www.keralapolice.gov.in/newsite/pdfs/arrested_persons_2014/august/4/arrested_persons_ktm.pdf)
Idukki (http://www.keralapolice.gov.in/newsite/pdfs/arrested_persons_2014/august/4/arrested_persons_idk.pdf)
Ernakulam City (http://www.keralapolice.gov.in/newsite/pdfs/arrested_persons_2014/august/4/arrested_persons_ekmcity.pdf)
Ernakulam Rural (http://www.keralapolice.gov.in/newsite/pdfs/arrested_persons_2014/august/4/arrested_persons_ekmrl.pdf) for both the files we have generated one shape file becouse dont have urban and rural polygon of this district.
Thrissur City (http://www.keralapolice.gov.in/newsite/pdfs/arrested_persons_2014/august/4/arrested_persons_tsrcity.pdf)
Thrissur Rural (http://www.keralapolice.gov.in/newsite/pdfs/arrested_persons_2014/august/4/arrested_persons_tsrrl.pdf) for both the files we have generated one shape file becouse dont have urban and rural polygon of this district.
Palakkad (http://www.keralapolice.gov.in/newsite/pdfs/arrested_persons_2014/august/4/arrested_persons_pkd.pdf)
Malappuram (http://www.keralapolice.gov.in/newsite/pdfs/arrested_persons_2014/august/4/arrested_persons_mpm.pdf)
Kozhikode City (http://www.keralapolice.gov.in/newsite/pdfs/arrested_persons_2014/august/4/arrested_persons_kkdcity.pdf)
Wayanad (http://www.keralapolice.gov.in/newsite/pdfs/arrested_persons_2014/august/4/arrested_persons_wynd.pdf)
Kannur (http://www.keralapolice.gov.in/newsite/pdfs/arrested_persons_2014/august/4/arrested_persons_knr.pdf)
Kasaragodu (http://www.keralapolice.gov.in/newsite/pdfs/arrested_persons_2014/august/4/arrested_persons_ksd.pdf) Kasaragodu_arrest.shp

Converting a pdf file to excel file:
In some situation we need to work with the tabular data that is in the form of pdf, it is better to have those tabel in the form of excel sheet. We can convert a pdf content or the tabular content of pdf to an excel sheet using online tool[3].

Splitting pdf files: http://www.splitpdf.com/
We can split a pdf file as per our requirement, some time we need to seperate all pages to be seperated as seperate file from a pdf file. Some time we need to a particular ranges of pages from a pdf file that can be done using this tool. In some cases we need to merge differed pdf files in a single file. We can give our sourse file from differed sourse location, (i.e., My Computer, DropBox, GoogleDrive etc). After spliting or Merging all files will be downloaded to the defauld Download folder of our system.

DBSCAN with Kerala Spatial Random Point Data-------------------------------------------------------------


I have executed DBSCAN for all the districts of Kerala with their optimized parameters.
District	TotPts	NCl	MinPts	Eps		Noise	meanCoord
Ernakulam 	433		5	10		0.07	39
Idduku		425		7	16		0.07	65
Kannur		324		3	11		0.077	63
kasaragod	182		7	6		0.07	18
Kollam		70		2	10		0.2		3
Kozhikodu	259		3	7		0.07	31
Malappuram	215		5	7		0.073	25
Palakkad	554		3	15		0.0666	46
Thiruvan	978		8	17		0.054	93
Wayanad		46		6	3		0.12	2

Kerala		3530	3	50		0.041	98 

-------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------
What to Do
Why We have to do
What are the previouse work
What are the drawbacks are there in prevoise work
What are the data to work with
http://rosettacode.org/wiki/Haversine_formula

How to evaluate the Goodness of DBSCAN cluster result?
Even if clusters can be judged by human eyes, then why would we need evaluation?
 1. to avoid finding patterns in noise
 2. to compare clustering algorithms
 3. to compare two sets of clusters
 4. to compare two clusters
 
 
 Crime Stat III - Overview:
 Crime Stat is a tool to analyse spatial and non spatial crime datasets. provide st at ist ical summar ies and m odels of crime
incident data.

CrimeS tat III in clu des rout in es for
Type of distance measurement
	Direct distance (shortest dist in Euclidean plane.)
	Indirect distance (horizontal-vertical dist Manhattan' metric)
	Network distance (path- distance can be used including speed, travel time, or travel cost)
Spatial distribution
	Mean center
	Standard distance deviation
	Standard deviational ellipse
	Median center
	Center of minimum distance
	Directional mean and variance
	Convex Hull
	Moran’s I spatial autocorrelation index
	Geary’s C spatial autocorrelation index
	Moran Correlogram
Distance analysis
	Nea r est neighbor a nalysis
	Ripley’s K st at ist ic
	Assign pr imary point s t o seconda ry point s
	Within pr imar y file dis tance mat r ix
	Between pr imar y file and seconda r y file dis tance mat r ix
	Between pr imar y file and gr id dist ance mat r ix
	Between seconda r y file and gr id dist ance mat r ix
Hot spot ana lysi s
	Mode
	Fuzzy m ode
	Nea r est neighbor h ier archical clust er ing
	Risk -adjus ted nea r est neighbor h ier archical clust er ing
	Spat ial and tempora l an alysis of crime routine (STAC)
	K-mean clus t er in g
	Anselin’s local Moran t est
Int erp ola ti on
	Sin gle va r ia ble va r ia ble kernel densit y int erpola t ion
	Duel va r ia ble va r ia ble kernel densit y int erpola t ion
Sp a ce-tim e ana lysi s
	Knox index
	Mant el index
	Cor r elat ed walk model
J ourney-to-Crime an a lysi s
	Ca libr a t e J ourney-t o-crim e funct ion
	J ourney-t o-crim e estim a t ion
	Draw crime tr ips
Crim e Tr a vel Dem a nd : Tr ip Gen era ti on
	Skewness dia gn ost ics
	Calibra te model
	Make prediction
	Ba la nce pr edict ed origin s & dest in a t ion s
Crim e Tr a vel Dem a nd : Tr ip Di st r ibuti on
	Calcula t e obser ved origin-dest inat ion t r ips
	Ca libr a t e im pedance funct ion
	Calibra t e or igin-dest ina t ion model
	Apply pr edict ed origin-dest ina t ion model
	Compa r e observed and p redicted or igin-dest inat ion t r ip lengths
Crime Tra vel Dema nd : Mode Split
	Calcula te mode sp lit
Crime Travel D ema nd: Network As si gnment
	Check for one-way str eet s
	Create a t r a n sit n etwor k from pr imary file
	Network ass ignment
	
In the distance measurement we can have Direct distance between two points, indirect distnace between two points and networked path distance between two points. In the networked path distance we can have one-way, two-way and weighted with speed, cost, time etc.

mean cent er and st anda rd dis t ance defin e the ar it hmet ic m ean loca t ion and the
degr ee of disper sion of the dist r ibut ion . The Mcsd rout in e calcu la t es 9 s t at ist ics.

Spa t ial autocor r elat ion indices iden t ify whet her point locations a re spa t ially relat ed,
eit her clu st er ed or disper sed.
-------------------------------------------------------------------------------------------------------------------------------------------------
The mode calculates the frequency of incidents for each unique location, defined by an X and Y coordinate. It will output a list of all unique locations and their X and Y coordinates and the number of incidents occurring at each, ranked in decreasing order from most frequent to least frequent . It will also list their rank order from 1 to the last unique location.

The fuzzy mode calculates the frequency of incidents for each unique location within a user-specified distance. The user must specify the search radius and the units for the radius (miles, nautical miles, feet, kilometers, meters). The routine will identify each unique location, defined by its X and Y coordinates, and will calculate the number of incidents that fall within the search radius. It will output a list of all unique locations and their X and Y coordinates and the number of incidents occurring at each within the search radius, ranked in decreasing order from most frequent to least frequent . It will also list their rank order from 1 to the last unique location.

The nearest neighbor hierarchical spatial clustering routine is a constant-distance clustering routine that groups points together on the basis of spatial proximity. The user defines a threshold distance and the minimum number of points that are required for each cluster, and an output size for displaying the clusters with ellipses. The routine identifies first-order clusters, representing groups of points that are closer together than the threshold distance and in which there is at least the minimum number of points specified by the user. Clustering is hierarchical in that the first-order clusters are treated as separate points to be clustered into second-order clusters, and the second-order clusters are treated as separate points to be clustered into third-order clusters, and so on. Higher-order clusters will be identified only if the distance between their centers are closer than the new threshold distance.
First, the search distance is chosen by the random nearest neighbor distance. The default value is 0.1 (i.e., fewer than 10% of the pair s could be expected to be as close or closer by chance.) Pairs of points that are closer together than the threshold distance are grouped together whereas pairs of points that are greater than the threshold distance are ignored. The smaller the significance level that is selected, the smaller the threshold distance and, usually, the fewer pairs will be selected. On the other hand, choosing a higher significance level, the larger the threshold distance and, usually, the more pairs will be selected. However, the higher the significance level chosen, the greater the likelihood that clusters could be chance groupings. 
Second, a fixed distance can be selected. The default is 1 mile. In this case, the search radius uses the fixed distance.

The risk-adjusted nearest neighbor hierarchical spatial clustering routine groups points together on the basis of spatial pr oximity, but the grouping is adjusted according to the distribution of a baseline variable. The routine requires both a primary file (e.g., robberies) and a secondary file (e.g., population). For the secondary variable, if an intensity or weight variable is to be used, it should be specified.
A density estimate of the secondary variable must be calculated to adjust the threshold distance of the primary var iable.

[4] this website is having facilities to get data from osm to other format.

[5] This is the google code for facebook data extraction tool on java web application
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
[6] Algomation.com, Animated Algorithms in JavaScript
http://www.algomation.com 
After some very positive comments and a welcome post on HN my algorithm platform Algomation.com I'm looking for feedback on the utility of this platform.
Its very good for the learner about the algorithm, that demonstrate the algorithm. It has variouse algorithms with the animated version.
----------------------------------------------------------Spatial phrouting process-------------------------------------------------------------------

A beginner guide to pgrouting:
It is assumed that--
Postgres with PostGIS and pgAdmin
QGIS with PostGIS Manager and RT Sql Layer plugins

Creating a routable road network;
We should have a shape file of the network.
loaded into to the PostGIS
We need to create start and end point geometry.
Createing a view: road_ext with all attribute plus st_startpoint and st_endpoint.

CREATE OR REPLACE VIEW road_ext AS
   SELECT *, st_startpoint(st_lineMerge(geom)), st_endpoint(st_lineMerge(geom))
   FROM street;

Then we create a table: node from the created view: road_ext
   
CREATE TABLE node AS
   SELECT row_number() OVER (ORDER BY foo.p)::integer AS id, 
          foo.p AS geom
   FROM (         
      SELECT DISTINCT road_ext.ST_startpoint AS p FROM road_ext
      UNION
      SELECT DISTINCT road_ext.ST_endpoint AS p FROM road_ext
   ) foo
   GROUP BY foo.p;
   
Then we create a table: network
   
   CREATE TABLE network AS
   SELECT a.*, b.id as start_id, c.id as end_id
   FROM road_ext AS a
      JOIN node AS b ON a.ST_startpoint = b.geom
      JOIN node AS c ON a.ST_endpoint = c.geom;
it will take some time (better to create index before calculating shortest path).
	  
SELECT * FROM shortest_path('
   SELECT gid AS id, 
          start_id::int4 AS source, 
          end_id::int4 AS target, 
          shape_leng::float8 AS cost
   FROM network',
1,
5110,
false,
false);	  
----------------------------------------------------------------------------------------------------------------------------------------------------------

Tesseract is an OCR software which can be used to convert image file to charater file given training data of the particular language.
jTessBoxEditor : This is a important tool for creating training data for any laguage and editing character size and all.
http://vietocr.sourceforge.net/training.html

TML - Text Mining Library for LSA (Latent Semantic Analysis)
http://tml-java.sourceforge.net/
-------------------------------------------------------------------------------------------------------------------------------------------------------------
--Total Table is 10--
--1. Address--
--2. Airport--
--3. CityCouncil--
--4. Crime_2009--
--5. DNRStream--
--6. Hydro--
--7. Municipal--
--8. Neighborhood--
--9. Railroad--
--10. Street--

-- 1. Table: public."Address"

-- DROP TABLE public."Address";

CREATE TABLE public."Address"
(
  gid integer NOT NULL DEFAULT nextval('"Address_gid_seq"'::regclass),
  "AddressID" character varying(20),
  "AddressLab" character varying(50),
  "Zipcode" integer,
  "AddressAng" double precision,
  "AddressTyp" integer,
  "FeatureTyp" integer,
  the_geom geometry(Point),
  CONSTRAINT "Address_pkey" PRIMARY KEY (gid)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE public."Address"
  OWNER TO postgres;

  
-- 2. Table: public."Airport"

-- DROP TABLE public."Airport";

CREATE TABLE public."Airport"
(
  gid integer NOT NULL DEFAULT nextval('"Airport_gid_seq"'::regclass),
  "Name" character varying(40),
  "Type" integer,
  the_geom geometry(Polygon),
  CONSTRAINT "Airport_pkey" PRIMARY KEY (gid)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE public."Airport"
  OWNER TO postgres;
  
  
-- 3. Table: public."CityCouncil"

-- DROP TABLE public."CityCouncil";

CREATE TABLE public."CityCouncil"
(
  gid integer NOT NULL DEFAULT nextval('"CityCouncil_gid_seq"'::regclass),
  "District" integer,
  "Representa" character varying(254),
  the_geom geometry(Polygon),
  CONSTRAINT "CityCouncil_pkey" PRIMARY KEY (gid)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE public."CityCouncil"
  OWNER TO postgres;

  
-- 4. Table: public."Crime_2009"

-- DROP TABLE public."Crime_2009";

CREATE TABLE public."Crime_2009"
(
  gid integer NOT NULL DEFAULT nextval('"Crime_2009_gid_seq"'::regclass),
  "OFFENSE" character varying(30),
  "OFFGEN" character varying(22),
  "BEGINDATE" date,
  "ENDDATE" date,
  "LOCATION" character varying(60),
  "crimeId" integer,
  x double precision,
  y double precision,
  the_geom geometry(Point),
  cgid integer,
  sgid integer,
  CONSTRAINT "Crime_2009_pkey" PRIMARY KEY (gid)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE public."Crime_2009"
  OWNER TO postgres;

-- Index: public.crime_2009_gix1

-- DROP INDEX public.crime_2009_gix1;

CREATE INDEX crime_2009_gix1
  ON public."Crime_2009"
  USING gist
  (the_geom);

-- 5. Table: public."DNRStream"

-- DROP TABLE public."DNRStream";

CREATE TABLE public."DNRStream"
(
  gid integer NOT NULL DEFAULT nextval('"DNRStream_gid_seq"'::regclass),
  "CODE" character varying(1),
  "DESCRIPTIO" character varying(12),
  "BUFFER" integer,
  "COSBuffer" integer,
  the_geom geometry(LineString),
  CONSTRAINT "DNRStream_pkey" PRIMARY KEY (gid)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE public."DNRStream"
  OWNER TO postgres;

  
-- 6. Table: public."Hydro"

-- DROP TABLE public."Hydro";

CREATE TABLE public."Hydro"
(
  gid integer NOT NULL DEFAULT nextval('"Hydro_gid_seq"'::regclass),
  "HydroType" integer,
  "Name" character varying(50),
  the_geom geometry(Polygon),
  CONSTRAINT "Hydro_pkey" PRIMARY KEY (gid)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE public."Hydro"
  OWNER TO postgres;

  
-- 7. Table: public."Municipal"

-- DROP TABLE public."Municipal";

CREATE TABLE public."Municipal"
(
  gid integer NOT NULL DEFAULT nextval('"Municipal_gid_seq"'::regclass),
  "MUNINAME" character varying(50),
  the_geom geometry(Polygon),
  CONSTRAINT "Municipal_pkey" PRIMARY KEY (gid)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE public."Municipal"
  OWNER TO postgres;

  
-- 8. Table: public."Neighborhood"

-- DROP TABLE public."Neighborhood";

CREATE TABLE public."Neighborhood"
(
  gid integer NOT NULL DEFAULT nextval('"Neighborhood_gid_seq"'::regclass),
  "Name" character varying(40),
  the_geom geometry(Polygon),
  CONSTRAINT "Neighborhood_pkey" PRIMARY KEY (gid)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE public."Neighborhood"
  OWNER TO postgres;

  
-- 9. Table: public."Railroad"

-- DROP TABLE public."Railroad";

CREATE TABLE public."Railroad"
(
  gid integer NOT NULL DEFAULT nextval('"Railroad_gid_seq"'::regclass),
  "TrackType" character varying(20),
  "Status" character varying(12),
  "Name" character varying(50),
  the_geom geometry(LineString),
  CONSTRAINT "Railroad_pkey" PRIMARY KEY (gid)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE public."Railroad"
  OWNER TO postgres;

  
--10. Table: public."Street"

-- DROP TABLE public."Street";

CREATE TABLE public."Street"
(
  gid integer NOT NULL DEFAULT nextval('"Street_gid_seq"'::regclass),
  "StreetID" character varying(20),
  "LeftFrom" integer,
  "LeftTo" integer,
  "RightFrom" integer,
  "RightTo" integer,
  "StreetDire" character varying(2),
  "StreetName" character varying(30),
  "StreetType" character varying(4),
  "LeftCity" character varying(25),
  "RightCity" character varying(25),
  "LeftZip" integer,
  "RightZip" integer,
  "RoadClass" character varying(1),
  "LeftFireAr" character varying(25),
  "RightFireA" character varying(25),
  the_geom geometry(LineString),
  CONSTRAINT "Street_pkey" PRIMARY KEY (gid)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE public."Street"
  OWNER TO postgres;

-- Index: public.street_gix1

-- DROP INDEX public.street_gix1;

CREATE INDEX street_gix1
  ON public."Street"
  USING gist
  (the_geom);
-----------------------------------------------------------------------------------------------------------------------------------------------------------
select "india_roads".the_geom from public."india_roads";


select "india_roads".gid from public."india_roads" where "india_roads"."state" = 'Kerala';

select * from public."india_roads" where "india_roads".gid = 843620;

DELETE FROM public."india_roads"
WHERE "india_roads"."state" = 'Kerala';
commit;

select * from public."Street";

select "Crime_2009".gid as Crime_gid, "Street".gid as Street_gid from public."Crime_2009", public."Street" where ST_overlaps("Crime_2009".the_geom, "Street".the_geom) = TRUE;

--Select min distance from a crime to the street ---
select min(ST_distance("Crime_2009".the_geom, "Street".the_geom)) from public."Crime_2009", public."Street" where "Street".gid = 1;

--select all the crimes within the distance of 0.5 fro the street gid = 1--
select "Crime_2009".gid from public."Crime_2009", public."Street" where "Street".gid = 1 and ST_distance("Crime_2009".the_geom, "Street".the_geom) < 0.4;

--select all the street wise crimes which are close to linestring by distance of 0.4--
select "Crime_2009".gid, "Street".gid from public."Crime_2009", public."Street" where ST_distance("Crime_2009".the_geom, "Street".the_geom) < 0.4;

select ST_distance from public."Crime_2009" where "Crime_2009".gid = 3503;

select distinct a.gid from public."Crime_2009" as a, public."Crime_2009" as b where a.the_geom = b.the_geom and a.gid != b.gid;
--calculates distance in degree between point and linestring---
select st_distance("india_points".the_geom, "india_roads".the_geom) from  public."india_points", public."india_roads" where "india_roads".gid = 1 and "india_points".gid = 1;

--calculates distance in meters between points and linestring--
SELECT ST_Distance(
			ST_Transform(ST_GeomFromText(ST_AsText("india_points".the_geom) ,4326),26986),
			ST_Transform(ST_GeomFromText(ST_AsText("india_roads".the_geom), 4326),26986)
		) from public."india_points", public."india_roads" where "india_roads".gid = 1 and "india_points".gid = 1;

select * from public."BPD_Part_1_Victim_Based_Crime_Data";

---------------------------------------------------------------------------------------------------------------------------------------------------
website link: http://www.spokanecity.org/services/gis/data/

The tables below list GIS data sets available for download. All data are in the State Plane Coordinate System, Zone: Washington North (5601), FIPS Zone: 4601, Datum: NAD83, Units: Feet. Metadata in XML format is included with all files.

Before using any of the datasets, please read the liability disclaimer (readme.htm) included in the zip archives.

Report any problems to giswebmaster@spokanecity.org.

The Data was last updated on: 1/9/2014.

Aerial Photo Layers

Layer	Description	Format	Update Status	File Size	Download
Spokane 2007 Ortho	6" color ortho-imagery covering the Spokane, WA metro area.	MrSID	June 2007	3GB	SpokaneOrtho2007.zip
Basemap Layers

Layer	Description	Format	Update Status	File Size	Download
2ft Elevation Contours	2 ft topographic contour data digitized from 6" aerial photography.	Shapefile	2007	144MB	Contour2007.zip
Addresses	Primary and secondary address points.	Shapefile	Continual	4MB	Address.zip
Airports	Airports, airfields, runways and landing strips.	Shapefile	Current	37KB	Airport.zip
Buildings	Building roofprints digitized from 6" aerial photography.	Shapefile	Continual	17MB	Building.zip
City Parks	City of Spokane Parks	Shapefile	Current	307KB	Park.zip
Railroads	Railroad Centerlines	Shapefile	Current	313KB	Railroad.zip
Streams	DNR surface water features including rivers and streams	Shapefile	2007	4MB	DNRStream.zip
Streets	Centerline of driven way.	Shapefile	Continual	5MB	Street.zip
USGS Contours	USGS 7.5 minute contours for Spokane County	Shapefile	Unknown	63MB	USGSContour.zip
Water Bodies	Surface water features including rivers, streams, ponds and lakes	Shapefile	2008	1002KB	Hydro.zip
Boundary Layers

Layer	Description	Format	Update Status	File Size	Download
City Council Districts	City Council District Boundaries	Shapefile	Current	144KB	CityCouncil.zip
City Limits	City Limits, Municipal Limits, and Corporate Boundaries	Shapefile	Current	298KB	Municipal.zip
Empowerment Zone	Purpose is to stimulate economic development throughout indicated areas.	Shapefile	Current	13KB	CEZ.zip
Fire Districts	Fire district boundaries.	Shapefile	Current	334KB	FireDistrict.zip
Neighborhoods	City of Spokane Neighborhood Council Districts	Shapefile	Current	226KB	Neighborhood.zip
County Assessor Layers

Layer	Description	Format	Update Status	File Size	Download
Parcels	Spokane County Assessor Tax Parcel Information.	Shapefile	Continual	74MB	Parcel.zip
Crime Layers

Layer	Description	Format	Update Status	File Size	Download
2008 Crimes	2008 crime locations.	Shapefile	2008	699KB	Crime2008.zip
2009 Crimes	2009 crime locations.	Shapefile	2009	690KB	Crime2009.zip
2010 Crimes	2010 crime locations	Shapefile	2010	644KB	Crime2010.zip
2011 Crimes	2011 crime locations.	Shapefile	2011	704KB	Crime2011.zip
2012 Crimes	2012 crime locations.	Shapefile	2012	793KB	Crime2012.zip
Environment Layers

Layer	Description	Format	Update Status	File Size	Download
Aquifer	Spokane-Rathdrum aquifer boundaries.	Shapefile	Current	35KB	Aquifer.zip
FEMA Flood Zones	100 year and 500 year FEMA flood zones.	Shapefile	Current	2MB	FemaFlood.zip
Planning Layers

Layer	Description	Format	Update Status	File Size	Download
Final Plats	Final plat outlines	Shapefile	Continual	256KB	FinalPlat.zip
Land Use Plan	Land use plan	Shapefile	Current	905KB	Landuse.zip
Preliminary Plats	Preliminary plat outlines	Shapefile	Continual	119KB	PrePlat.zip
Urban Growth Area	Urban growth area boundaries.	Shapefile	Current	594KB	UGA.zip
Zoning	Zoning boundaries	Shapefile	Current	722KB	Zoning.zip
----------------------------------------------------------------------------------------------------------------------------------------
UPDATE table_name
SET column1=value1,column2=value2,...
WHERE some_column=some_value;
-----------------------------------------------------------------------------------------------------------------------------------------

------------------------------------st_within()-------------------------------------------------------
--do make index of the interesting tabel to fasten the query--
--add one column to the interesting table ---
ALTER TABLE public."india_railways"
ADD "state" character varying(50)
--kerala region railways line selectin with st_within function--
update public."india_railways" set state = 'Kerala' 
where "india_railways".gid in 
	(select r.gid from public."india_railways" r, public."Kerala" k 
		where st_within(r.the_geom,k.the_geom) = True)
--Kerala_railways --
CREATE TABLE public.Kerala_railways
(
  gid integer NOT NULL DEFAULT nextval('india_railways_gid_seq'::regclass),
  osm_id character varying(11),
  name character varying(48),
  type character varying(16),
  the_geom geometry(LineString),
  state character varying(50),
  CONSTRAINT Kerala_railways_pkey PRIMARY KEY (gid)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE public.Kerala_railways
  OWNER TO postgres;

-- Index: public.kerala_railways_gix1

-- DROP INDEX public.indian_railways_gix1;

CREATE INDEX Kerala_railways_gix1
  ON public.Kerala_railways
  USING gist
  (the_geom);

--kerala rows insertion from india_railways--
insert into "kerala_railways"(osm_id, name, type, the_geom, state) 
select r.osm_id, r.name, r.type, r.the_geom, r.state from public."india_railways" r where state = 'Kerala'

--------------------------------------------------st_within() from kerala roads--------------------------------------------------
select * from india_roads where state = 'Kerala'
--do make index of the interesting tabel to fasten the query--
--add one column to the interesting table ---
ALTER TABLE public."india_roads"
ADD "state" character varying(50)
--kerala region railways line selectin with st_within function--
update public."india_roads" set state = 'Kerala' 
where "india_roads".gid in 
	(select r.gid from public."india_roads" r, public."Kerala" k 
		where st_within(r.the_geom,k.the_geom) = True)
--Kerala_railways --
CREATE TABLE public.Kerala_roads
(
  gid integer NOT NULL DEFAULT nextval('india_railways_gid_seq'::regclass),
  osm_id character varying(11),
  name character varying(48),
  type character varying(16),
  the_geom geometry(LineString),
  state character varying(50),
  CONSTRAINT Kerala_roads_pkey PRIMARY KEY (gid)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE public.Kerala_roads
  OWNER TO postgres;

-- Index: public.kerala_railways_gix1

-- DROP INDEX public.indian_railways_gix1;

CREATE INDEX Kerala_roads_gix
  ON public.Kerala_roads
  USING gist
  (the_geom);

--kerala rows insertion from india_railways--
insert into "kerala_roads"(osm_id, name, type, the_geom, state) 
select r.osm_id, r.name, r.type, r.the_geom, r.state from public."india_roads" r where state = 'Kerala'

select * from kerala_roads

--------------------------------------------------st_within() from kerala places--------------------------------------------------
select * from india_places where state = 'Kerala'
--do make index of the interesting tabel to fasten the query--
--add one column to the interesting table ---
ALTER TABLE public."india_places"
ADD "state" character varying(50)
--kerala region railways line selectin with st_within function--
update public."india_places" set state = 'Kerala' 
where "india_places".gid in 
	(select p.gid from public."india_places" p, public."Kerala" k 
		where st_within(p.the_geom,k.the_geom) = True)
--Kerala_railways --
CREATE TABLE public.Kerala_places
(
  gid integer NOT NULL DEFAULT nextval('india_places_gid_seq'::regclass),
  osm_id character varying(11),
  name character varying(48),
  type character varying(16),
  population integer,
  the_geom geometry(Point),
  state character varying(50),
  CONSTRAINT Kerala_places_pkey PRIMARY KEY (gid)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE public.Kerala_places
  OWNER TO postgres;

-- Index: public.india_places_gix

-- DROP INDEX public.india_places_gix;

CREATE INDEX Kerala_places_gix
  ON public.Kerala_places
  USING gist
  (the_geom);
  
--kerala rows insertion from india_railways--
insert into "kerala_places"(osm_id, name, type, population, the_geom, state) 
select p.osm_id, p.name, p.type, p.population, p.the_geom, p.state from public."india_places" p where state = 'Kerala'

select * from kerala_places

--------------------------------------------------st_within() from kerala buildings--------------------------------------------------
select * from india_buildings where state = 'Kerala'
--do make index of the interesting tabel to fasten the query--
--add one column to the interesting table ---
ALTER TABLE public."india_buildings"
ADD "state" character varying(50)
--kerala region railways line selectin with st_within function--
update public."india_buildings" set state = 'Kerala' 
where "india_buildings".id in 
	(select b.id from public."india_buildings" b, public."Kerala" k 
		where st_within(b.geom,k.the_geom) = True)
--Kerala_railways --
CREATE TABLE public.Kerala_places
(
  gid integer NOT NULL DEFAULT nextval('india_places_gid_seq'::regclass),
  osm_id character varying(11),
  name character varying(48),
  type character varying(16),
  population integer,
  the_geom geometry(Point),
  state character varying(50),
  CONSTRAINT Kerala_places_pkey PRIMARY KEY (gid)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE public.Kerala_places
  OWNER TO postgres;

-- Index: public.india_places_gix

-- DROP INDEX public.india_places_gix;

CREATE INDEX Kerala_places_gix
  ON public.Kerala_places
  USING gist
  (the_geom);
  
--kerala rows insertion from india_railways--
insert into "kerala_places"(osm_id, name, type, population, the_geom, state) 
select p.osm_id, p.name, p.type, p.population, p.the_geom, p.state from public."india_places" p where state = 'Kerala'

select * from kerala_places
--------------------------------------------------st_within() from kerala landuse--------------------------------------------------
CREATE INDEX india_landuse_gix
  ON public.india_landuse
  USING gist
  (the_geom);

select * from india_landuse where state = 'Kerala'
--do make index of the interesting tabel to fasten the query--
--add one column to the interesting table ---
ALTER TABLE public."india_landuse"
ADD "state" character varying(50)
--kerala region railways line selectin with st_within function--
update public."india_landuse" set state = 'Kerala' 
where "india_landuse".gid in 
	(select b.gid from public."india_landuse" b, public."Kerala" k 
		where st_within(b.the_geom,k.the_geom) = True)
--Kerala_railways --
CREATE TABLE public.Kerala_landuse
(
  gid integer NOT NULL DEFAULT nextval('india_landuse_gid_seq'::regclass),
  osm_id character varying(11),
  name character varying(48),
  type character varying(16),
  the_geom geometry(Polygon),
  state character varying(50),
  CONSTRAINT Kerala_landuse_pkey PRIMARY KEY (gid)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE public.Kerala_landuse
  OWNER TO postgres;


-- Index: public.india_places_gix

-- DROP INDEX public.india_places_gix;

CREATE INDEX Kerala_landuse_gix
  ON public.Kerala_landuse
  USING gist
  (the_geom);
  
--kerala rows insertion from india_railways--
insert into "kerala_landuse"(osm_id, name, type, the_geom, state) 
select p.osm_id, p.name, p.type, p.the_geom, p.state from public."india_landuse" p where state = 'Kerala'

select * from kerala_landuse

--------------------------------------------------st_within() from kerala waterways--------------------------------------------------
CREATE INDEX india_waterways_gix
  ON public.india_waterways
  USING gist
  (the_geom);

select * from india_waterways where state = 'Kerala'
--do make index of the interesting tabel to fasten the query--
--add one column to the interesting table ---
ALTER TABLE public."india_waterways"
ADD "state" character varying(50)
--kerala region railways line selectin with st_within function--
update public."india_waterways" set state = 'Kerala' 
where "india_waterways".gid in 
	(select b.gid from public."india_waterways" b, public."Kerala" k 
		where st_within(b.the_geom,k.the_geom) = True)
--Kerala_railways --
CREATE TABLE public.Kerala_waterways
(
  gid integer NOT NULL DEFAULT nextval('india_waterways_gid_seq'::regclass),
  osm_id character varying(11),
  name character varying(48),
  type character varying(16),
  width integer,
  the_geom geometry(Polygon),
  state character varying(50),
  CONSTRAINT Kerala_waterways_pkey PRIMARY KEY (gid)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE public.Kerala_waterways
  OWNER TO postgres;


-- Index: public.india_places_gix

-- DROP INDEX public.india_places_gix;

CREATE INDEX Kerala_waterways_gix
  ON public.Kerala_waterways
  USING gist
  (the_geom);
  
--kerala rows insertion from india_railways--
insert into "kerala_waterways"(osm_id, name, type, width, the_geom, state) 
select p.osm_id, p.name, p.type, p.width, p.the_geom, p.state from public."india_waterways" p where state = 'Kerala'

select * from kerala_waterways
-----------------------------------------------state plane coordinate in meter and feet-------------------------------------------
SELECT ST_Area(the_geom) As sqft, 
	ST_Area(the_geom)*POWER(0.3048,2) As sqm
		FROM (SELECT
			ST_GeomFromText('POLYGON((743238 2967416,743238 2967450,
			743265 2967450,743265.625 2967416,743238 2967416))',2249) ) As foo(the_geom);
select * from "Neighborhood" where "Neighborhood".gid = 1
SELECT ST_Area(the_geom) As sqft, 
	ST_Area(the_geom)*POWER(0.3048,2) As sqm
		FROM (select "Neighborhood".the_geom from "Neighborhood"  where "Neighborhood".gid = 1) as fee(the_geom)
--------------------------------------------st_lengthz()--------------------------------------------------------------------
ALTER TABLE "Street"
ADD "length_feet" double precision

update "Street" set length_feet = st_length("Street".the_geom)

1 foot	0.0003048 KM
1 foot	0.3048 M
1 foot	30.48 CM
1 foot	304.8 MM
1 foot	0.000189394 Mile
1 foot	0.333333 yard
1 foot 	12 inch
1 foot	0.000164579
References
1 http://mashable.com/2011/11/17/free-font-creation-tools/
2 http://www.myscriptfont.com/
3 http://online2pdf.com/pdf2excel
4. http://overpass-turbo.eu/
5. http://code.google.com/p/data-extraction-facebook/source/browse/#svn%2Ftrunk%2Fcom%2Fseis734%2Flogin%253Fstate%253Dclosed
6. http://www.algomation.com 